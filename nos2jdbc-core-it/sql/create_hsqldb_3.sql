CREATE PROCEDURE PROC_NONE_PARAM()
BEGIN ATOMIC
  DECLARE dummy INTEGER;
  SET dummy = 1;
END

CREATE PROCEDURE PROC_SIMPLETYPE_PARAM(
  IN param1 INTEGER)
BEGIN ATOMIC
  DECLARE dummy INTEGER;
  SET dummy = 1;
END

CREATE PROCEDURE PROC_SIMPLETYPE_TIME_PARAM(
  IN param1 TIME)
BEGIN ATOMIC
  DECLARE dummy INTEGER;
  SET dummy = 1;
END;

CREATE PROCEDURE PROC_DTO_PARAM(
  IN param1 INTEGER,
  INOUT param2 INTEGER,
  OUT param3 INTEGER)
BEGIN ATOMIC
  SET param2 = param2 + param1;
  SET param3 = param1;
END;

CREATE PROCEDURE PROC_DTO_TIME_PARAM(
  IN param1 TIME,
  INOUT param2 TIME,
  OUT param3 TIME)
BEGIN ATOMIC
  SET param2 = param1;
  SET param3 = param1;
END;

CREATE PROCEDURE PROC_RESULTSET(
  IN employeeId INTEGER)
READS SQL DATA DYNAMIC RESULT SETS 1
BEGIN ATOMIC
  DECLARE cur CURSOR WITH RETURN FOR
    SELECT EMPLOYEE_NO, EMPLOYEE_NAME FROM EMPLOYEE WHERE employee_id > employeeId ORDER BY employee_id; 
  OPEN cur;
END;

CREATE PROCEDURE PROC_RESULTSET_OUT(
  IN employeeId INTEGER,
  OUT employeeCount INTEGER)
READS SQL DATA DYNAMIC RESULT SETS 1
BEGIN ATOMIC
  DECLARE c_emp CURSOR WITH RETURN FOR
    SELECT * FROM EMPLOYEE WHERE employee_id > employeeId ORDER BY employee_id;
  OPEN c_emp;
  SELECT COUNT(*) INTO employeeCount FROM EMPLOYEE;
END;

CREATE PROCEDURE PROC_RESULTSET_UPDATE(
  IN employeeId INTEGER)
MODIFIES SQL DATA DYNAMIC RESULT SETS 1
BEGIN ATOMIC
  DECLARE c_emp CURSOR WITH RETURN FOR
    SELECT * FROM EMPLOYEE WHERE employee_id > employeeId ORDER BY employee_id;
  OPEN c_emp;
  UPDATE DEPARTMENT SET department_name = 'HOGE' WHERE department_id = 1;
END

CREATE PROCEDURE PROC_RESULTSET_UPDATE2(
  IN employeeId INTEGER)
MODIFIES SQL DATA DYNAMIC RESULT SETS 1
BEGIN ATOMIC
  DECLARE c_emp CURSOR WITH RETURN FOR
    SELECT * FROM EMPLOYEE WHERE employee_id > employeeId ORDER BY employee_id;
  UPDATE DEPARTMENT SET department_name = 'HOGE' WHERE department_id = 1;
  OPEN c_emp;
END

CREATE PROCEDURE PROC_RESULTSETS(
  IN employeeId INTEGER,
  IN departmentId INTEGER)
READS SQL DATA DYNAMIC RESULT SETS 1
BEGIN ATOMIC
  DECLARE c_emp CURSOR WITH RETURN FOR
    SELECT * FROM EMPLOYEE WHERE employee_id > employeeId ORDER BY employee_id;
  DECLARE c_dept CURSOR WITH RETURN FOR
    SELECT * FROM DEPARTMENT WHERE department_id > departmentId ORDER BY department_id;
  OPEN c_emp;
  OPEN c_dept;
END

CREATE PROCEDURE PROC_RESULTSETS_UPDATES_OUT(
  IN employeeId INTEGER,
  IN departmentId INTEGER,
  OUT employeeCount INTEGER)
MODIFIES SQL DATA DYNAMIC RESULT SETS 1
BEGIN ATOMIC
  DECLARE c_emp CURSOR WITH RETURN FOR
    SELECT * FROM EMPLOYEE WHERE employee_id > employeeId ORDER BY employee_id;
  DECLARE c_dept CURSOR WITH RETURN FOR
    SELECT * FROM DEPARTMENT WHERE department_id > departmentId ORDER BY department_id;
  OPEN c_emp;
  UPDATE ADDRESS SET street = 'HOGE' WHERE address_id = 1;
  OPEN c_dept;
  UPDATE ADDRESS SET street = 'FOO' WHERE address_id = 2;
  SELECT COUNT(*) INTO employeeCount FROM EMPLOYEE;
END

CREATE FUNCTION FUNC_NONE_PARAM() RETURNS INTEGER 
BEGIN ATOMIC
  RETURN 10;
END;

CREATE FUNCTION FUNC_SIMPLETYPE_PARAM(
  IN param1 INTEGER) RETURNS INTEGER 
BEGIN ATOMIC 
  RETURN 20;
END;

CREATE FUNCTION FUNC_SIMPLETYPE_TIME_PARAM(
  IN param1 TIME) RETURNS TIME 
BEGIN ATOMIC
  RETURN param1;
END;

CREATE FUNCTION FUNC_DTO_PARAM(
  IN param1 INTEGER,
  IN param2 INTEGER) RETURNS INTEGER
BEGIN ATOMIC
  RETURN param2 + param1;
END;

CREATE FUNCTION FUNC_DTO_TIME_PARAM(
  IN param1 TIME,
  IN param2 INTEGER) RETURNS TIME
BEGIN ATOMIC
  RETURN param1;
END;
commit;
